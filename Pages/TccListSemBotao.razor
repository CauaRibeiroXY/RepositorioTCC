@page "/"
@inject NavigationManager NavigationManager
@inject TccDB.TccServices service

<h3>Lista de TCCs</h3>

@if (Tccs != null && Tccs.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <a @onclick="OrdenarPorTitulo">Título ▲▼</a>  
                </th>
                <th>Autor</th>
                <th>Orientador</th>
                <th>
                    <a @onclick="OrdenarPorAno">Ano ▲▼</a>  
                </th>
                <th>Palavras-chave</th>
                <th>Resumo</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tcc in Tccs)
            {
                <tr>
                    <td>@tcc.Titulo</td>
                    <td>@tcc.Autor</td>
                    <td>@tcc.Orientador</td>
                    <td>@tcc.Ano</td>
                    <td>@tcc.PalavrasChave</td>
                    <td>@tcc.Resumo</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Nenhum TCC encontrado.</p>
}

@code {
    private List<Tcc> Tccs;
    private bool ordenacaoAscendente = true;
    private bool ordenacaoAscendenteAno = true;
    protected override async Task OnInitializedAsync()
    {
        Tccs = await service.GetTccsAsync();
    }

        private void OrdenarPorTitulo()
    {
        if (ordenacaoAscendente)
        {
            Tccs = Tccs.OrderBy(tcc => tcc.Titulo).ToList();
        }
        else
        {
            Tccs = Tccs.OrderByDescending(tcc => tcc.Titulo).ToList();
        }
        ordenacaoAscendente = !ordenacaoAscendente;
    }
    private void OrdenarPorAno()
    {
        if (ordenacaoAscendenteAno)
        {
            Tccs = Tccs.OrderBy(tcc => tcc.Ano).ToList();
        }
        else
        {
            Tccs = Tccs.OrderByDescending(tcc => tcc.Ano).ToList();
        }
        ordenacaoAscendenteAno = !ordenacaoAscendenteAno;
    }
}
